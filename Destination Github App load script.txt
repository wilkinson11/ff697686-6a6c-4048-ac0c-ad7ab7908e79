///$tab Main
SET ThousandSep=',';
SET DecimalSep='.';
SET MoneyThousandSep=',';
SET MoneyDecimalSep='.';
SET MoneyFormat='$ ###0.00;-$ ###0.00';
SET TimeFormat='h:mm:ss TT';
SET DateFormat='M/D/YYYY';
SET TimestampFormat='M/D/YYYY h:mm:ss[.fff] TT';
SET FirstWeekDay=6;
SET BrokenWeeks=1;
SET ReferenceDay=0;
SET FirstMonthOfYear=1;
SET CollationLocale='en-US';
SET CreateSearchIndexOnReload=1;
SET MonthNames='Jan;Feb;Mar;Apr;May;Jun;Jul;Aug;Sep;Oct;Nov;Dec';
SET LongMonthNames='January;February;March;April;May;June;July;August;September;October;November;December';
SET DayNames='Mon;Tue;Wed;Thu;Fri;Sat;Sun';
SET LongDayNames='Monday;Tuesday;Wednesday;Thursday;Friday;Saturday;Sunday';
SET NumericalAbbreviation='3:k;6:M;9:G;12:T;15:P;18:E;21:Z;24:Y;-3:m;-6:Î¼;-9:n;-12:p;-15:f;-18:a;-21:z;-24:y';

///$tab Auto-generated section
///$autogenerated
Set dataManagerTables = '','Suppliers','Orders','Categories','Products','Employees','Cutomers';
//This block renames script tables from non generated section which conflict with the names of managed tables

For each name in $(dataManagerTables) 
    Let index = 0;
    Let currentName = name; 
    Let tableNumber = TableNumber(name); 
    Let matches = 0; 
    Do while not IsNull(tableNumber) or (index > 0 and matches > 0)
        index = index + 1; 
        currentName = name & '-' & index; 
        tableNumber = TableNumber(currentName) 
        matches = Match('$(currentName)', $(dataManagerTables));
    Loop 
    If index > 0 then 
            Rename Table '$(name)' to '$(currentName)'; 
    EndIf; 
Next; 
Set dataManagerTables = ;


Unqualify *;

__countryAliasesBase:
LOAD
	Alias AS [__Country],
	ISO3Code AS [__ISO3Code]
FROM [lib://Reload Space Demo:DataFiles/countryAliases.qvd]
(qvd);

__countryGeoBase:
LOAD
	ISO3Code AS [__ISO3Code],
	ISO2Code AS [__ISO2Code],
	Polygon AS [__Polygon]
FROM [lib://Reload Space Demo:DataFiles/countryGeo.qvd]
(qvd);

__countryName2IsoThree:
MAPPING LOAD
	__Country,
	__ISO3Code
RESIDENT __countryAliasesBase;

__countryCodeIsoThree2Polygon:
MAPPING LOAD
	__ISO3Code,
	__Polygon
RESIDENT __countryGeoBase;

[Suppliers]:
LOAD
	[SupplierID],
	[Supplier],
	[SupplierContact],
	[SupplierCountry],
	APPLYMAP( '__countryCodeIsoThree2Polygon', APPLYMAP( '__countryName2IsoThree', LOWER([SupplierCountry])), '-') AS [Suppliers.SupplierCountry_GeoInfo]
 FROM [lib://Reload Space Demo:DataFiles/QlikSenseWorkShop Workshop Wed.xlsx]
(ooxml, embedded labels, table is Suppliers);

[Orders]:
LOAD
	[OrderID],
	[OrderDate],
	[CustomerID] AS "CustomerID-[Customer No]",
	[EmployeeID] AS [EmployeeID-EmpID],
	[ShipperID],
	[ProductID],
	[Sales],
	[Costs],
	[Profit],
	[Quantity],
	[Discount],
	[Freight]
 FROM [lib://Reload Space Demo:DataFiles/QlikSenseWorkShop Workshop Wed.xlsx]
(ooxml, embedded labels, table is Orders);

[Categories]:
LOAD
	[CategoryID],
	[Category],
	[Description]
 FROM [lib://Reload Space Demo:DataFiles/QlikSenseWorkShop Workshop Wed.xlsx]
(ooxml, embedded labels, table is Categories);

[Products]:
LOAD
	[ProductID],
	[CategoryID],
	[Product],
	[SupplierID]
 FROM [lib://Reload Space Demo:DataFiles/QlikSenseWorkShop Workshop Wed.xlsx]
(ooxml, embedded labels, table is Products);

[Employees]:
LOAD
	[EmployeeID] AS [Employees.EmployeeID],
	[Extension],
	[EmployeeName],
	[Hire Date],
	[Office],
	[Reports To],
	[Title],
	[Year Salary],
	[EmpID] AS [EmployeeID-EmpID]
 FROM [lib://Reload Space Demo:DataFiles/QlikSenseWorkShop Workshop Wed.xlsx]
(ooxml, embedded labels, table is Employees);

[Cutomers]:
LOAD
	[Address],
	[City],
	[ContactName],
	[Country],
	[CountryCode],
	[Customer],
	"[Customer No]" AS "CustomerID-[Customer No]",
	[Latitude],
	[Longitude],
	[PostalCode],
	APPLYMAP( '__countryCodeIsoThree2Polygon', UPPER([CountryCode]), '-') AS [Cutomers.CountryCode_GeoInfo],
	GeoMakePoint([Latitude], [Longitude]) AS [Longitude_Latitude]
 FROM [lib://Reload Space Demo:DataFiles/Customers.xlsx]
(ooxml, embedded labels, table is Cutomers);



TAG FIELD [SupplierCountry] WITH '$geoname', '$relates_Suppliers.SupplierCountry_GeoInfo';
TAG FIELD [Suppliers.SupplierCountry_GeoInfo] WITH '$geopolygon', '$hidden', '$relates_SupplierCountry';

TAG FIELD [CountryCode] WITH '$geoname', '$relates_Cutomers.CountryCode_GeoInfo';
TAG FIELD [Cutomers.CountryCode_GeoInfo] WITH '$geopolygon', '$hidden', '$relates_CountryCode';

DROP TABLES __countryAliasesBase, __countryGeoBase;
[autoCalendar]: 
  DECLARE FIELD DEFINITION Tagged ('$date')
FIELDS
  Dual(Year($1), YearStart($1)) AS [Year] Tagged ('$axis', '$year'),
  Dual('Q'&Num(Ceil(Num(Month($1))/3)),Num(Ceil(NUM(Month($1))/3),00)) AS [Quarter] Tagged ('$quarter', '$cyclic'),
  Dual(Year($1)&'-Q'&Num(Ceil(Num(Month($1))/3)),QuarterStart($1)) AS [YearQuarter] Tagged ('$yearquarter', '$qualified'),
  Dual('Q'&Num(Ceil(Num(Month($1))/3)),QuarterStart($1)) AS [_YearQuarter] Tagged ('$yearquarter', '$hidden', '$simplified'),
  Month($1) AS [Month] Tagged ('$month', '$cyclic'),
  Dual(Year($1)&'-'&Month($1), monthstart($1)) AS [YearMonth] Tagged ('$axis', '$yearmonth', '$qualified'),
  Dual(Month($1), monthstart($1)) AS [_YearMonth] Tagged ('$axis', '$yearmonth', '$simplified', '$hidden'),
  Dual('W'&Num(Week($1),00), Num(Week($1),00)) AS [Week] Tagged ('$weeknumber', '$cyclic'),
  Date(Floor($1)) AS [Date] Tagged ('$axis', '$date', '$qualified'),
  Date(Floor($1), 'D') AS [_Date] Tagged ('$axis', '$date', '$hidden', '$simplified'),
  If (DayNumberOfYear($1) <= DayNumberOfYear(Today()), 1, 0) AS [InYTD] ,
  Year(Today())-Year($1) AS [YearsAgo] ,
  If (DayNumberOfQuarter($1) <= DayNumberOfQuarter(Today()),1,0) AS [InQTD] ,
  4*Year(Today())+Ceil(Month(Today())/3)-4*Year($1)-Ceil(Month($1)/3) AS [QuartersAgo] ,
  Ceil(Month(Today())/3)-Ceil(Month($1)/3) AS [QuarterRelNo] ,
  If(Day($1)<=Day(Today()),1,0) AS [InMTD] ,
  12*Year(Today())+Month(Today())-12*Year($1)-Month($1) AS [MonthsAgo] ,
  Month(Today())-Month($1) AS [MonthRelNo] ,
  If(WeekDay($1)<=WeekDay(Today()),1,0) AS [InWTD] ,
  (WeekStart(Today())-WeekStart($1))/7 AS [WeeksAgo] ,
  Week(Today())-Week($1) AS [WeekRelNo] ;

DERIVE FIELDS FROM FIELDS [OrderDate], [Hire Date] USING [autoCalendar] ;